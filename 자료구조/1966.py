"""
여러분도 알다시피 여러분의 프린터 기기는 여러분이 인쇄하고자 하는 문서를 인쇄 명령을 받은 ‘순서대로’, 즉 먼저 요청된 것을 먼저 인쇄한다. 여러 개의 문서가 쌓인다면 Queue 자료구조에 쌓여서 FIFO - First In First Out - 에 따라 인쇄가 되게 된다. 하지만 상근이는 새로운 프린터기 내부 소프트웨어를 개발하였는데, 이 프린터기는 다음과 같은 조건에 따라 인쇄를 하게 된다.

현재 Queue의 가장 앞에 있는 문서의 ‘중요도’를 확인한다.
나머지 문서들 중 현재 문서보다 중요도가 높은 문서가 하나라도 있다면, 이 문서를 인쇄하지 않고 Queue의 가장 뒤에 재배치 한다. 그렇지 않다면 바로 인쇄를 한다.
예를 들어 Queue에 4개의 문서(A B C D)가 있고, 중요도가 2 1 4 3 라면 C를 인쇄하고, 다음으로 D를 인쇄하고 A, B를 인쇄하게 된다.

여러분이 할 일은, 현재 Queue에 있는 문서의 수와 중요도가 주어졌을 때, 어떤 한 문서가 몇 번째로 인쇄되는지 알아내는 것이다. 예를 들어 위의 예에서 C문서는 1번째로, A문서는 3번째로 인쇄되게 된다.

입력
첫 줄에 테스트케이스의 수가 주어진다. 각 테스트케이스는 두 줄로 이루어져 있다.

테스트케이스의 첫 번째 줄에는 문서의 개수 N(1 ≤ N ≤ 100)과, 몇 번째로 인쇄되었는지 궁금한 문서가 현재 Queue에서 몇 번째에 놓여 있는지를 나타내는 정수 M(0 ≤ M < N)이 주어진다. 이때 맨 왼쪽은 0번째라고 하자. 두 번째 줄에는 N개 문서의 중요도가 차례대로 주어진다. 중요도는 1 이상 9 이하의 정수이고, 중요도가 같은 문서가 여러 개 있을 수도 있다.

출력
각 테스트 케이스에 대해 문서가 몇 번째로 인쇄되는지 출력한다.
"""
#TODO 큐
#1 (제출한 정답)
t = int(input())

for test_case in range(t):
    n, m = map(int, input().split())
    document = list(map(int, input().split()))
    prio = document.copy() #우선순위 리스트 만들어주기
    prio.sort(reverse=True) #높을 수록 우선순위가  위이기 대문에 내림차순으로 sort해줌

    answer = 0 # 출력할 답 0으로 초기화
    now = m #현재 필요한 문서의 인덱스 번호 n
    while len(document)>0: #리스트가 다 없어질 때 까지 반복
        if(prio[0]!=document[0]): #우선순위가 가장 높은게 아니라면
            temp = document.pop(0) #리스트에서 제외시켜준 다음
            document.append(temp) #맨 뒤로 보내기
            now -= 1 #인덱스0이었던게 맨 뒤로 갔기 때문에 문서의 인덱스 번호도 하나씩 줄어듦
            if(now==-1): #만약 인덱스 0이었다면 -1이 되면 계속해서 음수가 되기 때문에
                now = len(document)-1 #리스트의 마지막 위치로 반영해주기
        else: #우선순위가 가장 높은게 맞다면
            prio.pop(0) #우선순위 리스트에서도 없애주고
            document.pop(0) #문서 리스트에서도 없애주기
            now -= 1 #마찬가지로 문서의 인덱스 번호도 -1
            answer += 1 #출력될 번호 1로 올려주고
            if(now==-1): #만약 출력된게 필요한 문서라면
                print(answer) #출력해주고 break로 빠져나와주기
                break

#2 불필요하고 중복된 변수 제거 하고 합쳐주기
"""
1. prio라는 리스트를 굳이 copy할 필요 없이 document의 max값을 매번마다 지정해주면 됨
2. now라는 거 필요 없이 m이 곧 now기 때문에 now라는 새로운 변수 사용하지 않고 그대로 m 써주기(m이 상수일 필요가 없기 때문)
3. document.pop()과 m -=1 이 불필요하게 중복됨 우선 뽑은 다음 검사하는게 중복을 줄여줄 수 있음
?! 메모리는 똑같지만 시간이 더 늘어났음 개신기하네 copy라 별 상관이 없던걸까
-> 최댓값을 구하는 max()가 추가되었기 때문에 시간이 더 늘어난 걸로 보임 개신기하다
메모리 똑같은게 더 신기하네 now라는 변수도 없애고 prio라는 리스트도 안썼는데 오히려 내가 한게 더 나은 답이었군
"""
for test_case in range(t):
    n, m = map(int, input().split())
    document = list(map(int, input().split()))

    answer = 0 # 출력할 답 0으로 초기화
    while len(document)>0: #리스트가 다 없어질 때 까지 반복
        best = max(document)
        temp = document.pop(0)  # 리스트에서 제외시켜준 다음
        m -= 1  # 인덱스0이었던게 맨 뒤로 갔기 때문에 문서의 인덱스 번호도 하나씩 줄어듦

        if(best!=temp): #우선순위가 가장 높은게 아니라면
            document.append(temp) #맨 뒤로 보내기
            if(m==-1): #만약 인덱스 0이었다면 -1이 되면 계속해서 음수가 되기 때문에
                m = len(document)-1 #리스트의 마지막 위치로 반영해주기
        else: #우선순위가 가장 높은게 맞다면
            answer += 1 #출력될 번호 1로 올려주고
            if(m==-1): #만약 출력된게 필요한 문서라면
                print(answer) #출력해주고 break로 빠져나와주기
                break


"""
첫번째 접근 -> 파이썬 라이브러리 priority queue 
실패 이유 -> 우선순위가 겹칠 때 큐의 포인터를 돌리는게 아니라 그냥 바로 내보내기 때문에 안됐음

두번째 접근 -> 필요한 문서를 now라는 걸로 지정한 다음 큐를 돌리면서 필요한 문서의 인덱스 계속 따라가게 하기
index error -> for문을 돌려서 했는데 팩토리얼 쓸 것도 아니고 while문으로 돌려서 리스트에 저장된 값이 0이 될때까지 돌게 만들기

틀렸습니다 -> now가 -1이 될 때 now = n-1로 하게 했는데 이렇게 되면 큐의 len이 줄어들었을 때 반영이 안됨.
그렇기 때문에 n-1이 아닌 len(document)-1로 수정
"""